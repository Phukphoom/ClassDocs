////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : MainCircuit.vf
// /___/   /\     Timestamp : 11/05/2020 03:09:55
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog "C:/Users/Admin/Desktop/CodeHub/ClassDocs/Semester2-1/Digital System Fundamentals/Lab9_4-11-2563/Lab9/MainCircuit.vf" -w "C:/Users/Admin/Desktop/CodeHub/ClassDocs/Semester2-1/Digital System Fundamentals/Lab9_4-11-2563/Lab9/MainCircuit.sch"
//Design Name: MainCircuit
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale  100 ps / 10 ps

module D4_16E_HXILINX_MainCircuit (D0, D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, A0, A1, A2, A3, E);
    

   output D0;
   output D1;
   output D2;
   output D3;
   output D4;
   output D5;
   output D6;
   output D7;
   output D8;
   output D9;
   output D10;
   output D11;
   output D12;
   output D13;
   output D14;
   output D15;

   input  A0;
   input  A1;
   input  A2;
   input  A3;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;
   reg D4;
   reg D5;
   reg D6;
   reg D7;
   reg D8;
   reg D9;
   reg D10;
   reg D11;
   reg D12;
   reg D13;
   reg D14;
   reg D15;

      always @ (A0 or A1 or A2 or A3 or E)
      begin
         if(!E)
           {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0000;
        else
        begin
           case({A3,A2,A1,A0})
             4'b0000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0001;
             4'b0001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0010;
             4'b0010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_0100;
             4'b0011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0000_1000;
             4'b0100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0001_0000;
             4'b0101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0010_0000;
             4'b0110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_0100_0000;
             4'b0111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0000_1000_0000;
             4'b1000 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0001_0000_0000;
             4'b1001 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0010_0000_0000;
             4'b1010 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_0100_0000_0000;
             4'b1011 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0000_1000_0000_0000;
             4'b1100 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0001_0000_0000_0000;
             4'b1101 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0010_0000_0000_0000;
             4'b1110 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b0100_0000_0000_0000;
             4'b1111 :  {D15, D14, D13, D12, D11, D10, D9, D8, D7, D6, D5, D4, D3, D2, D1, D0} <= 16'b1000_0000_0000_0000;
          endcase
        end
     end 

endmodule
`timescale  100 ps / 10 ps

module INV8_HXILINX_MainCircuit (O, I);
    

   output [7:0] O;

   input  [7:0] I;

assign O = ~I;
endmodule
`timescale  100 ps / 10 ps

module OR6_HXILINX_MainCircuit (O, I0, I1, I2, I3, I4, I5);
    

   output O;

   input I0;
   input I1;
   input I2;
   input I3;
   input I4;
   input I5;

assign O = (I0 || I1 || I2 || I3 || I4 || I5);

endmodule
`timescale  100 ps / 10 ps

module M4_1E_HXILINX_MainCircuit (O, D0, D1, D2, D3, E, S0, S1);
    

   output O;

   input  D0;
   input  D1;
   input  D2;
   input  D3;
   input  E;
   input  S0;
   input  S1;

   reg O;

   always @ ( D0 or D1 or D2 or D3 or E or S0 or S1)
   begin
      if(!E)
      O <= 1'b0;
      else 
      begin
        case({S1,S0})
        2'b00 : O <= D0;
        2'b01 : O <= D1;
        2'b10 : O <= D2;
        2'b11 : O <= D3;
        endcase
      end
   end
    
endmodule
`timescale  100 ps / 10 ps

module D2_4E_HXILINX_MainCircuit (D0, D1, D2, D3, A0, A1, E);
    

   output D0;
   output D1;
   output D2;
   output D3;

   input  A0;
   input  A1;
   input  E;
  
   reg D0;
   reg D1;
   reg D2;
   reg D3;

      always @ (A0 or A1 or E)
      begin
         if(!E)
           {D3, D2, D1, D0} <= 4'b0000;
        else
        begin
           case({A1,A0})
             2'b00 : {D3,D2,D1,D0} <= 4'b0001;
             2'b01 : {D3,D2,D1,D0} <= 4'b0010;
             2'b10 : {D3,D2,D1,D0} <= 4'b0100;
             2'b11 : {D3,D2,D1,D0} <= 4'b1000;
          endcase
        end
     end 

endmodule
`timescale 100 ps / 10 ps

module CC16RE_HXILINX_MainCircuit(CEO, Q, TC, C, CE, R);

   parameter TERMINAL_COUNT = 16'b1111_1111_1111_1111;
   
   output             CEO;
   output [15:0]      Q;
   output             TC;
   
   input 	      C;	
   input 	      CE;	
   input 	      R;	
   
   reg    [15:0]      Q;
   
   always @(posedge C)
     begin
	if (R)
	  Q <= 16'b0000_0000_0000_0000;
	else if (CE)
	  Q <= Q + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = R ? 1'b0 : (Q == TERMINAL_COUNT); 
   
endmodule
`timescale 100 ps / 10 ps

module CB2CE_HXILINX_MainCircuit(CEO, Q0, Q1, TC, C, CE, CLR);
   
   localparam TERMINAL_COUNT = 2'b11;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q1, Q0} <= 2'b00;
	else if (CE)
	  {Q1,Q0} <= {Q1,Q0} + 1;
     end
   
   assign CEO = TC & CE;
   assign TC = ({Q1,Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module Xor8Bits_Bus_MUSER_MainCircuit(A, 
                                      B, 
                                      O);

    input [7:0] A;
    input [7:0] B;
   output [7:0] O;
   
   
   XOR2  XLXI_1 (.I0(B[0]), 
                .I1(A[0]), 
                .O(O[0]));
   XOR2  XLXI_2 (.I0(B[1]), 
                .I1(A[1]), 
                .O(O[1]));
   XOR2  XLXI_3 (.I0(B[3]), 
                .I1(A[3]), 
                .O(O[3]));
   XOR2  XLXI_4 (.I0(B[2]), 
                .I1(A[2]), 
                .O(O[2]));
   XOR2  XLXI_5 (.I0(B[5]), 
                .I1(A[5]), 
                .O(O[5]));
   XOR2  XLXI_6 (.I0(B[4]), 
                .I1(A[4]), 
                .O(O[4]));
   XOR2  XLXI_7 (.I0(B[7]), 
                .I1(A[7]), 
                .O(O[7]));
   XOR2  XLXI_8 (.I0(B[6]), 
                .I1(A[6]), 
                .O(O[6]));
endmodule
`timescale 1ns / 1ps

module SHL8Bits_Bus_MUSER_MainCircuit(A, 
                                      O);

    input [7:0] A;
   output [7:0] O;
   
   
   GND  XLXI_8 (.G(O[0]));
   BUF  XLXI_13_0 (.I(A[0]), 
                  .O(O[1]));
   BUF  XLXI_13_1 (.I(A[1]), 
                  .O(O[2]));
   BUF  XLXI_13_2 (.I(A[2]), 
                  .O(O[3]));
   BUF  XLXI_13_3 (.I(A[3]), 
                  .O(O[4]));
   BUF  XLXI_13_4 (.I(A[4]), 
                  .O(O[5]));
   BUF  XLXI_13_5 (.I(A[5]), 
                  .O(O[6]));
   BUF  XLXI_13_6 (.I(A[6]), 
                  .O(O[7]));
endmodule
`timescale 1ns / 1ps

module Mux4To1_4_Bus_MUSER_MainCircuit(A, 
                                       B, 
                                       C, 
                                       D, 
                                       S, 
                                       O);

    input [3:0] A;
    input [3:0] B;
    input [3:0] C;
    input [3:0] D;
    input [1:0] S;
   output [3:0] O;
   
   wire XLXN_1;
   
   (* HU_SET = "XLXI_1_0" *) 
   M4_1E_HXILINX_MainCircuit  XLXI_1 (.D0(A[3]), 
                                     .D1(B[3]), 
                                     .D2(C[3]), 
                                     .D3(D[3]), 
                                     .E(XLXN_1), 
                                     .S0(S[0]), 
                                     .S1(S[1]), 
                                     .O(O[3]));
   (* HU_SET = "XLXI_2_1" *) 
   M4_1E_HXILINX_MainCircuit  XLXI_2 (.D0(A[2]), 
                                     .D1(B[2]), 
                                     .D2(C[2]), 
                                     .D3(D[2]), 
                                     .E(XLXN_1), 
                                     .S0(S[0]), 
                                     .S1(S[1]), 
                                     .O(O[2]));
   (* HU_SET = "XLXI_3_2" *) 
   M4_1E_HXILINX_MainCircuit  XLXI_3 (.D0(A[1]), 
                                     .D1(B[1]), 
                                     .D2(C[1]), 
                                     .D3(D[1]), 
                                     .E(XLXN_1), 
                                     .S0(S[0]), 
                                     .S1(S[1]), 
                                     .O(O[1]));
   (* HU_SET = "XLXI_4_3" *) 
   M4_1E_HXILINX_MainCircuit  XLXI_4 (.D0(A[0]), 
                                     .D1(B[0]), 
                                     .D2(C[0]), 
                                     .D3(D[0]), 
                                     .E(XLXN_1), 
                                     .S0(S[0]), 
                                     .S1(S[1]), 
                                     .O(O[0]));
   VCC  XLXI_23 (.P(XLXN_1));
endmodule
`timescale 1ns / 1ps

module Mux4To1_8_Bus_MUSER_MainCircuit(A, 
                                       B, 
                                       C, 
                                       D, 
                                       S, 
                                       O);

    input [7:0] A;
    input [7:0] B;
    input [7:0] C;
    input [7:0] D;
    input [1:0] S;
   output [7:0] O;
   
   
   Mux4To1_4_Bus_MUSER_MainCircuit  XLXI_1 (.A(A[3:0]), 
                                           .B(B[3:0]), 
                                           .C(C[3:0]), 
                                           .D(D[3:0]), 
                                           .S(S[1:0]), 
                                           .O(O[3:0]));
   Mux4To1_4_Bus_MUSER_MainCircuit  XLXI_2 (.A(A[7:4]), 
                                           .B(B[7:4]), 
                                           .C(C[7:4]), 
                                           .D(D[7:4]), 
                                           .S(S[1:0]), 
                                           .O(O[7:4]));
endmodule
`timescale 1ns / 1ps

module HEX27SEG_Bus_MUSER_MainCircuit(HEX, 
                                      SEG_A, 
                                      SEG_B, 
                                      SEG_C, 
                                      SEG_D, 
                                      SEG_E, 
                                      SEG_F, 
                                      SEG_G);

    input [3:0] HEX;
   output SEG_A;
   output SEG_B;
   output SEG_C;
   output SEG_D;
   output SEG_E;
   output SEG_F;
   output SEG_G;
   
   wire XLXN_1;
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_5;
   wire XLXN_6;
   wire XLXN_7;
   wire XLXN_8;
   wire XLXN_9;
   wire XLXN_11;
   wire XLXN_12;
   wire XLXN_13;
   wire XLXN_14;
   wire XLXN_35;
   wire XLXN_36;
   wire XLXN_53;
   wire XLXN_56;
   wire XLXN_57;
   wire XLXN_58;
   wire XLXN_59;
   wire XLXN_60;
   wire XLXN_61;
   wire XLXN_62;
   wire XLXN_74;
   
   OR4  XLXI_1 (.I0(XLXN_2), 
               .I1(XLXN_5), 
               .I2(XLXN_36), 
               .I3(XLXN_12), 
               .O(XLXN_56));
   (* HU_SET = "XLXI_2_4" *) 
   OR6_HXILINX_MainCircuit  XLXI_2 (.I0(XLXN_6), 
                                   .I1(XLXN_7), 
                                   .I2(XLXN_36), 
                                   .I3(XLXN_11), 
                                   .I4(XLXN_13), 
                                   .I5(XLXN_14), 
                                   .O(XLXN_57));
   OR4  XLXI_3 (.I0(XLXN_35), 
               .I1(XLXN_11), 
               .I2(XLXN_13), 
               .I3(XLXN_14), 
               .O(XLXN_58));
   OR5  XLXI_4 (.I0(XLXN_2), 
               .I1(XLXN_5), 
               .I2(XLXN_53), 
               .I3(XLXN_9), 
               .I4(XLXN_14), 
               .O(XLXN_59));
   (* HU_SET = "XLXI_5_5" *) 
   D4_16E_HXILINX_MainCircuit  XLXI_5 (.A0(HEX[0]), 
                                      .A1(HEX[1]), 
                                      .A2(HEX[2]), 
                                      .A3(HEX[3]), 
                                      .E(XLXN_74), 
                                      .D0(XLXN_1), 
                                      .D1(XLXN_2), 
                                      .D2(XLXN_35), 
                                      .D3(XLXN_4), 
                                      .D4(XLXN_5), 
                                      .D5(XLXN_6), 
                                      .D6(XLXN_7), 
                                      .D7(XLXN_53), 
                                      .D8(), 
                                      .D9(XLXN_8), 
                                      .D10(XLXN_9), 
                                      .D11(XLXN_36), 
                                      .D12(XLXN_11), 
                                      .D13(XLXN_12), 
                                      .D14(XLXN_13), 
                                      .D15(XLXN_14));
   (* HU_SET = "XLXI_6_6" *) 
   OR6_HXILINX_MainCircuit  XLXI_6 (.I0(XLXN_2), 
                                   .I1(XLXN_4), 
                                   .I2(XLXN_5), 
                                   .I3(XLXN_6), 
                                   .I4(XLXN_53), 
                                   .I5(XLXN_8), 
                                   .O(XLXN_60));
   OR5  XLXI_18 (.I0(XLXN_2), 
                .I1(XLXN_35), 
                .I2(XLXN_4), 
                .I3(XLXN_53), 
                .I4(XLXN_12), 
                .O(XLXN_61));
   OR4  XLXI_19 (.I0(XLXN_1), 
                .I1(XLXN_2), 
                .I2(XLXN_53), 
                .I3(XLXN_11), 
                .O(XLXN_62));
   INV  XLXI_20 (.I(XLXN_56), 
                .O(SEG_A));
   INV  XLXI_21 (.I(XLXN_57), 
                .O(SEG_B));
   INV  XLXI_22 (.I(XLXN_58), 
                .O(SEG_C));
   INV  XLXI_23 (.I(XLXN_59), 
                .O(SEG_D));
   INV  XLXI_24 (.I(XLXN_60), 
                .O(SEG_E));
   INV  XLXI_25 (.I(XLXN_61), 
                .O(SEG_F));
   INV  XLXI_26 (.I(XLXN_62), 
                .O(SEG_G));
   VCC  XLXI_27 (.P(XLXN_74));
endmodule
`timescale 1ns / 1ps

module FullAdder_MUSER_MainCircuit(A_BIT, 
                                   B_BIT, 
                                   C_IN, 
                                   C_OUT, 
                                   SUM);

    input A_BIT;
    input B_BIT;
    input C_IN;
   output C_OUT;
   output SUM;
   
   wire XLXN_7;
   wire XLXN_15;
   wire XLXN_16;
   
   XOR2  XLXI_20 (.I0(B_BIT), 
                 .I1(A_BIT), 
                 .O(XLXN_7));
   XOR2  XLXI_21 (.I0(C_IN), 
                 .I1(XLXN_7), 
                 .O(SUM));
   AND2  XLXI_22 (.I0(XLXN_7), 
                 .I1(C_IN), 
                 .O(XLXN_15));
   AND2  XLXI_23 (.I0(A_BIT), 
                 .I1(B_BIT), 
                 .O(XLXN_16));
   OR2  XLXI_24 (.I0(XLXN_16), 
                .I1(XLXN_15), 
                .O(C_OUT));
endmodule
`timescale 1ns / 1ps

module Adder8Bits_Bus_MUSER_MainCircuit(A, 
                                        B, 
                                        C_OUT, 
                                        SUM);

    input [7:0] A;
    input [7:0] B;
   output C_OUT;
   output [7:0] SUM;
   
   wire XLXN_2;
   wire XLXN_4;
   wire XLXN_6;
   wire XLXN_8;
   wire XLXN_10;
   wire XLXN_12;
   wire XLXN_14;
   wire XLXN_33;
   
   FullAdder_MUSER_MainCircuit  XLXI_1 (.A_BIT(A[0]), 
                                       .B_BIT(B[0]), 
                                       .C_IN(XLXN_33), 
                                       .C_OUT(XLXN_2), 
                                       .SUM(SUM[0]));
   FullAdder_MUSER_MainCircuit  XLXI_2 (.A_BIT(A[1]), 
                                       .B_BIT(B[1]), 
                                       .C_IN(XLXN_2), 
                                       .C_OUT(XLXN_4), 
                                       .SUM(SUM[1]));
   FullAdder_MUSER_MainCircuit  XLXI_35 (.A_BIT(A[2]), 
                                        .B_BIT(B[2]), 
                                        .C_IN(XLXN_4), 
                                        .C_OUT(XLXN_6), 
                                        .SUM(SUM[2]));
   FullAdder_MUSER_MainCircuit  XLXI_36 (.A_BIT(A[3]), 
                                        .B_BIT(B[3]), 
                                        .C_IN(XLXN_6), 
                                        .C_OUT(XLXN_8), 
                                        .SUM(SUM[3]));
   FullAdder_MUSER_MainCircuit  XLXI_40 (.A_BIT(A[4]), 
                                        .B_BIT(B[4]), 
                                        .C_IN(XLXN_8), 
                                        .C_OUT(XLXN_10), 
                                        .SUM(SUM[4]));
   FullAdder_MUSER_MainCircuit  XLXI_41 (.A_BIT(A[5]), 
                                        .B_BIT(B[5]), 
                                        .C_IN(XLXN_10), 
                                        .C_OUT(XLXN_12), 
                                        .SUM(SUM[5]));
   FullAdder_MUSER_MainCircuit  XLXI_42 (.A_BIT(A[6]), 
                                        .B_BIT(B[6]), 
                                        .C_IN(XLXN_12), 
                                        .C_OUT(XLXN_14), 
                                        .SUM(SUM[6]));
   FullAdder_MUSER_MainCircuit  XLXI_43 (.A_BIT(A[7]), 
                                        .B_BIT(B[7]), 
                                        .C_IN(XLXN_14), 
                                        .C_OUT(C_OUT), 
                                        .SUM(SUM[7]));
   GND  XLXI_76 (.G(XLXN_33));
endmodule
`timescale 1ns / 1ps

module Sub8Bits_Bus_MUSER_MainCircuit(A, 
                                      B, 
                                      O);

    input [7:0] A;
    input [7:0] B;
   output [7:0] O;
   
   wire [7:0] C;
   wire [7:0] XLXN_5;
   wire [7:0] XLXN_9;
   
   Adder8Bits_Bus_MUSER_MainCircuit  XLXI_2 (.A(A[7:0]), 
                                            .B(XLXN_9[7:0]), 
                                            .C_OUT(), 
                                            .SUM(XLXN_5[7:0]));
   Adder8Bits_Bus_MUSER_MainCircuit  XLXI_3 (.A(XLXN_5[7:0]), 
                                            .B(C[7:0]), 
                                            .C_OUT(), 
                                            .SUM(O[7:0]));
   VCC  XLXI_5 (.P(C[0]));
   GND  XLXI_7_0 (.G(C[1]));
   GND  XLXI_7_1 (.G(C[2]));
   GND  XLXI_7_2 (.G(C[3]));
   GND  XLXI_7_3 (.G(C[4]));
   GND  XLXI_7_4 (.G(C[5]));
   GND  XLXI_7_5 (.G(C[6]));
   GND  XLXI_7_6 (.G(C[7]));
   (* HU_SET = "XLXI_9_7" *) 
   INV8_HXILINX_MainCircuit  XLXI_9 (.I(B[7:0]), 
                                    .O(XLXN_9[7:0]));
endmodule
`timescale 1ns / 1ps

module MainCircuit(CLK_P123, 
                   DIP, 
                   MODE_SW_P45, 
                   SW, 
                   COMMON0_P44, 
                   COMMON1_P43, 
                   COMMON2_P33, 
                   COMMON3_P30, 
                   ModeSel, 
                   SEG_A_P41, 
                   SEG_B_P40, 
                   SEG_C_P35, 
                   SEG_D_P34, 
                   SEG_E_P32, 
                   SEG_F_P29, 
                   SEG_G_P27);

    input CLK_P123;
    input [7:0] DIP;
    input MODE_SW_P45;
    input [7:0] SW;
   output COMMON0_P44;
   output COMMON1_P43;
   output COMMON2_P33;
   output COMMON3_P30;
   output [1:0] ModeSel;
   output SEG_A_P41;
   output SEG_B_P40;
   output SEG_C_P35;
   output SEG_D_P34;
   output SEG_E_P32;
   output SEG_F_P29;
   output SEG_G_P27;
   
   wire [7:0] O;
   wire [1:0] S;
   wire XLXN_97;
   wire XLXN_98;
   wire XLXN_99;
   wire XLXN_100;
   wire XLXN_101;
   wire XLXN_151;
   wire XLXN_152;
   wire XLXN_153;
   wire [3:0] XLXN_226;
   wire XLXN_241;
   wire XLXN_243;
   wire [7:0] XLXN_244;
   wire [7:0] XLXN_245;
   wire [7:0] XLXN_246;
   wire [7:0] XLXN_247;
   wire [3:0] XLXN_257;
   wire [3:0] XLXN_258;
   wire [1:0] ModeSel_DUMMY;
   
   assign ModeSel[1:0] = ModeSel_DUMMY[1:0];
   (* HU_SET = "XLXI_18_9" *) 
   CB2CE_HXILINX_MainCircuit  XLXI_18 (.C(XLXN_151), 
                                      .CE(XLXN_153), 
                                      .CLR(XLXN_152), 
                                      .CEO(), 
                                      .Q0(S[0]), 
                                      .Q1(S[1]), 
                                      .TC());
   (* HU_SET = "XLXI_25_8" *) 
   D2_4E_HXILINX_MainCircuit  XLXI_25 (.A0(S[0]), 
                                      .A1(S[1]), 
                                      .E(XLXN_97), 
                                      .D0(XLXN_98), 
                                      .D1(XLXN_99), 
                                      .D2(XLXN_100), 
                                      .D3(XLXN_101));
   VCC  XLXI_26 (.P(XLXN_97));
   INV  XLXI_28 (.I(XLXN_98), 
                .O(COMMON0_P44));
   INV  XLXI_29 (.I(XLXN_99), 
                .O(COMMON1_P43));
   INV  XLXI_30 (.I(XLXN_100), 
                .O(COMMON2_P33));
   INV  XLXI_31 (.I(XLXN_101), 
                .O(COMMON3_P30));
   (* HU_SET = "XLXI_53_10" *) 
   CC16RE_HXILINX_MainCircuit  XLXI_53 (.C(CLK_P123), 
                                       .CE(XLXN_153), 
                                       .R(XLXN_152), 
                                       .CEO(), 
                                       .Q(), 
                                       .TC(XLXN_151));
   VCC  XLXI_71 (.P(XLXN_153));
   GND  XLXI_72 (.G(XLXN_152));
   Mux4To1_4_Bus_MUSER_MainCircuit  XLXI_74 (.A(O[3:0]), 
                                            .B(O[7:4]), 
                                            .C(XLXN_257[3:0]), 
                                            .D(XLXN_258[3:0]), 
                                            .S(S[1:0]), 
                                            .O(XLXN_226[3:0]));
   Adder8Bits_Bus_MUSER_MainCircuit  XLXI_75 (.A(SW[7:0]), 
                                             .B(DIP[7:0]), 
                                             .C_OUT(), 
                                             .SUM(XLXN_244[7:0]));
   SHL8Bits_Bus_MUSER_MainCircuit  XLXI_76 (.A(SW[7:0]), 
                                           .O(XLXN_247[7:0]));
   Sub8Bits_Bus_MUSER_MainCircuit  XLXI_78 (.A(SW[7:0]), 
                                           .B(DIP[7:0]), 
                                           .O(XLXN_245[7:0]));
   HEX27SEG_Bus_MUSER_MainCircuit  XLXI_83 (.HEX(XLXN_226[3:0]), 
                                           .SEG_A(SEG_A_P41), 
                                           .SEG_B(SEG_B_P40), 
                                           .SEG_C(SEG_C_P35), 
                                           .SEG_D(SEG_D_P34), 
                                           .SEG_E(SEG_E_P32), 
                                           .SEG_F(SEG_F_P29), 
                                           .SEG_G(SEG_G_P27));
   (* HU_SET = "XLXI_86_11" *) 
   CB2CE_HXILINX_MainCircuit  XLXI_86 (.C(MODE_SW_P45), 
                                      .CE(XLXN_241), 
                                      .CLR(XLXN_243), 
                                      .CEO(), 
                                      .Q0(ModeSel_DUMMY[0]), 
                                      .Q1(ModeSel_DUMMY[1]), 
                                      .TC());
   VCC  XLXI_88 (.P(XLXN_241));
   GND  XLXI_89 (.G(XLXN_243));
   Mux4To1_8_Bus_MUSER_MainCircuit  XLXI_90 (.A(XLXN_244[7:0]), 
                                            .B(XLXN_245[7:0]), 
                                            .C(XLXN_246[7:0]), 
                                            .D(XLXN_247[7:0]), 
                                            .S(ModeSel_DUMMY[1:0]), 
                                            .O(O[7:0]));
   GND  XLXI_92_0 (.G(XLXN_257[0]));
   GND  XLXI_92_1 (.G(XLXN_257[1]));
   GND  XLXI_92_2 (.G(XLXN_257[2]));
   GND  XLXI_92_3 (.G(XLXN_257[3]));
   Xor8Bits_Bus_MUSER_MainCircuit  XLXI_93 (.A(SW[7:0]), 
                                           .B(DIP[7:0]), 
                                           .O(XLXN_246[7:0]));
   GND  XLXI_94_0 (.G(XLXN_258[0]));
   GND  XLXI_94_1 (.G(XLXN_258[1]));
   GND  XLXI_94_2 (.G(XLXN_258[2]));
   GND  XLXI_94_3 (.G(XLXN_258[3]));
endmodule
